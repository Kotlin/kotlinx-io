buildscript {
    repositories {
        if (kotlin_version.contains("eap") || kotlin_version.contains("-rc-") || kotlin_version.contains("-M")) {
            maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
            maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        }
        if (kotlin_version.contains("dev")) {
            maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        }

        mavenLocal()
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.37"
        classpath("org.jetbrains.kotlin:kotlin-native-gradle-plugin:$kotlin_native_version") {
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-gradle-plugin'
        }
        classpath group: 'net.rubygrapefruit', name: 'native-platform', version: '0.10'
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomicFU_version"
    }
}

plugins {
    id 'net.researchgate.release' version '2.6.0'
}


static def platformOf(project) {
    if (project.name.endsWith("-common")) return "common"
    if (project.name.endsWith("-js")) return "js"
    if (project.name.endsWith("-native")) return "native"
    if (project.name.endsWith("-jvm")) return "jvm"
    // todo: fix
    if (project.name.endsWith("benchmarks")) return "jvm"
    return "common"
}

allprojects {
    repositories {
        if (kotlin_version.contains("eap") || kotlin_version.contains("-rc-") || kotlin_version.contains("-M")) {
            maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.1' }
            maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
            maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
            maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        }
        if (kotlin_version.contains("dev")) {
            maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        }

        maven { url 'https://kotlin.bintray.com/kotlinx' }
        mavenCentral()
        mavenLocal()
    }

    def platform = platformOf(project)
    apply plugin: "kotlin-platform-$platform"

    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    if (platform == 'native') {
        sourceSets {
            main {
                component {
                    targets = [ 'ios_arm64', 'ios_arm32', 'ios_x64', 'macos_x64', 'linux_x64', 'mingw_x64' ]
//                    target 'ios_arm64', 'ios_arm32', 'ios_x64', 'macos_x64', 'linux_x64'
                    outputKinds = [KLIBRARY]
                }
            }
        }
    }

    if (project.hasProperty('releaseVersion')) {
        project.version = project.releaseVersion
    }

    apply plugin: 'maven'

    task sourceJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        if (platform != 'native') {
            from sourceSets.main.kotlin
            duplicatesStrategy DuplicatesStrategy.EXCLUDE
            def platformSrc = sourceSets.main.allSource
            def commonSrc = rootProject.sourceSets.main.allSource
            from(platformSrc + commonSrc)
        }
    }

    task emptyJar(type: Jar) {
        classifier 'javadoc'
    }

    tasks.build.dependsOn(['sourceJar', 'emptyJar'])
}

configure(allprojects) {
    def platform = platformOf(project)
    apply from: rootProject.file("gradle/atomicfu-${platform}.gradle")
}

def skipPublish = ['benchmarks']
configure(allprojects.findAll { !skipPublish.contains(it.name) }) {
    apply from: rootProject.file('pom.gradle')
    apply from: rootProject.file('gradle/bintray.gradle')

    publishing {
        publications {
            mavenProject(MavenPublication) {
                if (!project.name.contains('native')) {
                    from components.java
                }

                groupId project.group
                artifactId project.name
                version project.version

                artifact sourceJar

                artifact emptyJar {
                    classifier 'javadoc'
                }

                withPom(pom)
            }
        }
    }

    afterReleaseBuild.dependsOn bintrayUpload
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"

    testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
}
