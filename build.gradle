buildscript {
   /*
    * These property group is used to build kotlinx-io against Kotlin compiler snapshot.
    * How does it work:
    * When build_snapshot_train is set to true, kotlin_version property is overridden with kotlin_snapshot_version,
    * atomicfu_version and coroutines_version is overwritten by TeamCity environment
    * (AFU and kx is built with snapshot and published to mavenLocal as previous step or the snapshot build).
    * DO NOT change the name of these properties without adapting kotlinx.train build chain.
    */
    def prop = rootProject.properties['build_snapshot_train']
    ext.build_snapshot_train = prop != null && prop != ""
    if (build_snapshot_train) {
        ext.kotlin_version = rootProject.properties['kotlin_snapshot_version']
        if (kotlin_version == null) {
            throw new IllegalArgumentException("'kotlin_snapshot_version' should be defined when building with snapshot compiler")
        }
        repositories {
            mavenLocal()
            maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        }
    }
    repositories {
        jcenter()
        gradlePluginPortal()
//        maven { url "../kotlin-libraries-infra/build/maven" }
//        maven { url "../gradle-benchmarks/build/maven" }
        maven { url "https://dl.bintray.com/orangy/maven" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomicfu_version"
        classpath "org.jetbrains.gradle.benchmarks:benchmarks.plugin:$benchmarks_version"
        classpath "kotlinx.team:kotlinx.team.infra:$infra_version"
    }
}

apply plugin: 'kotlinx.team.infra'

infra {
    teamcity {
        bintrayUser = "orangy"
        bintrayToken = "credentialsJSON:9a48193c-d16d-46c7-8751-2fb434b09e07"
    }
    
    publishing {
        include(":kotlinx-io")
        include(":kotlinx-coroutines-io")

        bintray {
            organization = 'orangy'
            repository = 'maven'
            library = 'kotlinx-io'

            username = findProperty('bintrayUser')
            password = findProperty('bintrayApiKey')
        }
    }

//    apiCheck {
//        include(":kotlinx-io")
//        include(":kotlinx-coroutines-io")
//    }

    node {
        version = '10.15.3'
        mocha {
            version = '6.0.2'
            // headlessChromeVersion = '2.0.2'
        }
        
        install("source-map-support", "0.5.11")
        install("text-encoding", "0.7.0")
        install("mocha-teamcity-reporter", "2.5.2")
    }
}

allprojects {
    if (build_snapshot_train) {
        def deployVersion = properties['DeployVersion']
        if (deployVersion != null) version = deployVersion
        ext.kotlin_version = rootProject.properties['kotlin_snapshot_version']
        println "Using Kotlin $kotlin_version for project $it"

        def skipSnapshotChecks = rootProject.properties['skip_snapshot_checks'] != null
        if (!skipSnapshotChecks && version != atomicfu_version) {
            throw new IllegalStateException("Current deploy version is $version, but atomicfu version is not overridden ($atomicfu_version) for $it")
        }

        if (!skipSnapshotChecks && version != coroutines_version) {
            throw new IllegalStateException("Current deploy version is $version, but coroutines version is not overridden ($coroutines_version) for $it")
        }

        kotlin_version = rootProject.properties['kotlin_snapshot_version']
        repositories {
            mavenLocal()
            maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        }
    }
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/kotlinx" }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
//        maven { url rootProject.file("../gradle-benchmarks/build/maven") }
        maven { url "https://dl.bintray.com/orangy/maven" }
    }
}

println("Using Kotlin compiler version: $org.jetbrains.kotlin.config.KotlinCompilerVersion.VERSION")
if (build_snapshot_train) {
    gradle.taskGraph.whenReady { // Hack to prevent kotlinCompilerClasspath + apiCheck interference
        println "Manifest of kotlin-compiler-embeddable.jar for kotlinx-io"
        configure(subprojects.findAll { it.name == "kotlinx-io" }) {
            configurations.matching { it.name == "kotlinCompilerClasspath" }.all {
                resolvedConfiguration.getFiles().findAll { it.name.contains("kotlin-compiler-embeddable") }.each {
                    def manifest = zipTree(it).matching {
                        include 'META-INF/MANIFEST.MF'
                    }.getFiles().first()

                    manifest.readLines().each {
                        println it
                    }
                }
            }
        }
    }
}
