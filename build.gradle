import org.jetbrains.kotlin.konan.target.HostManager

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.37"
        classpath group: 'net.rubygrapefruit', name: 'native-platform', version: '0.10'
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomic_fu_version"
        classpath "com.moowork.gradle:gradle-node-plugin:$gradle_node_version"
    }
}

def skipPublish = ['benchmarks', 'binary-compatibility-validator']

apply from: "gradle/experimental.gradle"

allprojects {
    project.ext.hostManager = new HostManager()

    if (project.hasProperty('releaseVersion')) {
        project.version = project.releaseVersion
    }

    repositories {
        mavenLocal()
        maven { url 'https://kotlin.bintray.com/kotlinx' }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        jcenter()
    }

    apply plugin: 'kotlin-multiplatform'
    apply plugin: 'kotlinx-atomicfu'

    apply from: rootProject.file("gradle/utility.gradle")

    apply from: rootProject.file("gradle/jvm.gradle")

    if (!skipPublish.contains(project.name)) {
        apply from: rootProject.file("gradle/common.gradle")
        apply from: rootProject.file("gradle/js.gradle")
        apply from: rootProject.file("gradle/native.gradle")

        apply from: rootProject.file("gradle/publish.gradle")
    }

    kotlin {
        configure(sourceSets) {
            def srcDir = name.endsWith('Main') ? 'src' : 'test'
            def platform = name[0..-5]

            kotlin.srcDir "$platform/$srcDir"

            if (!skipPublish.contains(project.name)) {
                languageSettings {
                    progressiveMode = true
                    experimentalAnnotations.each { useExperimentalAnnotation(it) }
                }
            }
        }

        configure(targets) {
            def targetName = it.name
            compilations.all { compilation ->
                def compileTask = tasks.getByName(compilation.compileKotlinTaskName)
                compileTask.kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=" + experimentalAnnotations.join(",")]
                if (targetName.contains("jvm") && compilation.compilationName == "main") {
                    compileTask.kotlinOptions.freeCompilerArgs += ["-Xdump-declarations-to=${buildDir}/visibilities.json"]
                }
            }
        }
    }
}
