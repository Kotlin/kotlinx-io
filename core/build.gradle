plugins {
    id "kotlin-multiplatform"
    id "maven-publish"
    id "jacoco"
    id 'org.jetbrains.dokka' version '0.10.1'
}

def ideaActive = System.getProperty('idea.active') == 'true'

kotlin {
    jvm()

    if (!ideaActive) {
        linuxX64()
        mingwX64()
        macosX64()
        iosX64()
        iosArm64()
        iosArm32()
    } else {
        macosX64("native")
    }

    js {
        nodejs {
            testTask {
                debug = false
            }
        }
        browser()
    }

    sourceSets {
        commonMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib"
            }
        }

        commonTest {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-test-common"
                api "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }

        jvmMain {
            dependencies {
            }
        }
        jvmTest {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-test-junit"
            }
        }

        jsMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib-js"
            }
        }

        jsTest {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-test-js"
            }
        }

        if (!ideaActive) {
            nativeMain {
                dependsOn commonMain
            }

            nativeTest

            configure([macosX64Main, linuxX64Main, mingwX64Main, iosX64Main, iosArm32Main, iosArm64Main]) {
                dependsOn nativeMain
            }

            configure([macosX64Test, linuxX64Test, mingwX64Test, iosX64Test, iosArm32Test, iosArm64Test]) {
                dependsOn nativeTest
            }
        }
    }

    targets {
        def cinteropTargets = ideaActive ? [targets.getByName("native")] : [macosX64, linuxX64, mingwX64, iosX64, iosArm32, iosArm64]
        configure(cinteropTargets) {
            compilations.main {
                cinterops {
                    bits { defFile = file("nativeMain/interop/bits.def") }
                    sockets { defFile = file("nativeMain/interop/sockets.def") }
                }
            }

            compilations.test {
                cinterops {
                    testSockets { defFile = file("nativeTest/interop/testSockets.def") }
                }
            }
        }
    }

    sourceSets.all {
        def isTest = it.toString().endsWith("Test")
        kotlin.srcDirs = ["$it.name/src"]
        resources.srcDirs = ["$it.name/resources"]
        languageSettings {
            progressiveMode = true

            useExperimentalAnnotation("kotlin.Experimental")
            useExperimentalAnnotation("kotlinx.io.core.ExperimentalIoApi")
            useExperimentalAnnotation("kotlin.contracts.ExperimentalContracts")
            if (isTest) {
                useExperimentalAnnotation("kotlin.ExperimentalUnsignedTypes")
                useExperimentalAnnotation("kotlin.ExperimentalStdlibApi")
            }
        }
    }

    task emptyJavadoc(type: Jar) {
        classifier = "javadoc"
    }

    targets.all { target ->
        def publication = publishing.publications.findByName(target.name)

        if (publication != null) {
            publication.artifact emptyJavadoc
        }
    }
}

dokka {
    outputFormat = 'gfm'
    outputDirectory = "$buildDir/dokka"
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("${buildDir}/jacoco-reports")
}

task testCoverage(type: JacocoReport, dependsOn: jvmTest) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports."

    def coverageSourceDirs = [
            "commonMain/src",
            "jvmMain/src"
    ]

    classDirectories.from files(fileTree(dir: "${buildDir}/classes/kotlin/jvm/"))
    sourceDirectories.from files(coverageSourceDirs)
    additionalSourceDirs.from files(coverageSourceDirs)
    executionData.from files("${buildDir}/jacoco/jvmTest.exec")

    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true

        html.destination file("${buildDir}/jacoco-reports/html")
    }
}
